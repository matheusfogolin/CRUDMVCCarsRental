// <auto-generated />
using System;
using CRUDMVCCarsRental.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUDMVCCarsRental.Data.Migrations
{
    [DbContext(typeof(CarsRentalDbContext))]
    [Migration("20231010230628_ThirdMigration")]
    partial class ThirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRUDMVCCarsRental.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("FabricationYear")
                        .HasColumnType("int")
                        .HasColumnName("Fabrication_Year");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int")
                        .HasColumnName("Model_Year");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Registration_Date");

                    b.Property<decimal>("RentValuePerDay")
                        .HasColumnType("money")
                        .HasColumnName("Rent_Value_Per_Day");

                    b.HasKey("Id");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("CRUDMVCCarsRental.Entities.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DaysRented")
                        .HasColumnType("int")
                        .HasColumnName("Days_Rented");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Ending_Date");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Starting_Date");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Rents", (string)null);
                });

            modelBuilder.Entity("CRUDMVCCarsRental.Entities.Rent", b =>
                {
                    b.HasOne("CRUDMVCCarsRental.Entities.Car", null)
                        .WithMany("Rents")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRUDMVCCarsRental.Entities.Car", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
